#!/usr/bin/env python3
"""
Script de Valida√ß√£o Completa GLPI - Debugging de Dados Zerados
Executa checklist sistem√°tico para identificar problemas nos dados
"""

import os
import sys
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.settings import get_config
from services.legacy.glpi_service_facade import GLPIServiceFacade
from services.legacy.authentication_service import GLPIAuthenticationService

# Configurar logs detalhados
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('glpi_debug')

class GLPIDataValidator:
    """Validador completo de dados GLPI"""
    
    def __init__(self):
        self.settings = get_config()
        self.glpi_url = self.settings.GLPI_URL
        self.app_token = self.settings.GLPI_APP_TOKEN
        self.user_token = self.settings.GLPI_USER_TOKEN
        self.auth_service = GLPIAuthenticationService()
        self.glpi_facade = GLPIServiceFacade()
        self.session_token = None
        
    def validate_connectivity(self) -> bool:
        """1. Teste de conectividade b√°sica"""
        print("\nüîç 1. TESTANDO CONECTIVIDADE GLPI...")
        
        try:
            response = requests.get(
                f"{self.glpi_url}",
                timeout=30,
                headers={'App-Token': self.app_token}
            )
            print(f"‚úÖ Conectividade GLPI: {response.status_code}")
            logger.debug(f"Response headers: {response.headers}")
            return response.status_code == 200
        except Exception as e:
            print(f"‚ùå Erro de conectividade: {e}")
            logger.error(f"Connectivity error: {e}")
            return False
    
    def validate_authentication(self) -> bool:
        """2. Teste de autentica√ß√£o"""
        print("\nüîê 2. TESTANDO AUTENTICA√á√ÉO...")
        
        try:
            auth_success = self.auth_service.authenticate()
            if auth_success:
                print("‚úÖ Autentica√ß√£o GLPI: OK")
                if hasattr(self.auth_service, 'session_token') and self.auth_service.session_token:
                    print(f"   Token: {self.auth_service.session_token[:20]}...")
                return True
            else:
                print("‚ùå Falha na autentica√ß√£o - Token n√£o obtido")
                return False
        except Exception as e:
            print(f"‚ùå Erro na autentica√ß√£o: {e}")
            logger.error(f"Authentication error: {e}")
            return False
    
    def validate_basic_data(self) -> Dict[str, Any]:
        """3. Teste de dados b√°sicos"""
        print("\nüìä 3. VALIDANDO DADOS B√ÅSICOS...")
        
        results = {
            'tickets_available': False,
            'users_available': False,
            'ticket_count': 0,
            'user_count': 0
        }
        
        try:
            # Testar busca de tickets
            tickets_response = self.glpi_facade._make_authenticated_request(
                'GET', 
                '/Ticket',
                params={'range': '0-0'}  # Apenas 1 ticket para teste
            )
            
            if tickets_response and isinstance(tickets_response, list):
                results['tickets_available'] = len(tickets_response) > 0
                results['ticket_count'] = len(tickets_response)
                print(f"‚úÖ Tickets dispon√≠veis: {results['tickets_available']} (count: {results['ticket_count']})")
            else:
                print("‚ùå Nenhum ticket encontrado")
                logger.warning("No tickets found in response")
            
            # Testar busca de usu√°rios
            users_response = self.glpi_facade._make_authenticated_request(
                'GET',
                '/User',
                params={'range': '0-0'}  # Apenas 1 usu√°rio para teste
            )
            
            if users_response and isinstance(users_response, list):
                results['users_available'] = len(users_response) > 0
                results['user_count'] = len(users_response)
                print(f"‚úÖ Usu√°rios dispon√≠veis: {results['users_available']} (count: {results['user_count']})")
            else:
                print("‚ùå Nenhum usu√°rio encontrado")
                logger.warning("No users found in response")
                
        except Exception as e:
            print(f"‚ùå Erro ao validar dados b√°sicos: {e}")
            logger.error(f"Basic data validation error: {e}")
        
        return results
    
    def validate_technician_ranking(self) -> List[Dict[str, Any]]:
        """4. Teste do endpoint problem√°tico - Ranking de T√©cnicos"""
        print("\nüë• 4. VALIDANDO RANKING DE T√âCNICOS...")
        
        try:
            # Definir per√≠odo de teste (√∫ltimos 30 dias)
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            logger.debug(f"Per√≠odo de teste: {start_date} - {end_date}")
            
            # Buscar ranking usando o m√©todo corrigido
            ranking = self.glpi_facade.get_technician_ranking_with_filters(limit=10)
            
            if not ranking:
                print("‚ùå Nenhum t√©cnico encontrado no ranking")
                logger.warning("No technicians found in ranking")
                return []
            
            print(f"üìà Total de t√©cnicos no ranking: {len(ranking)}")
            
            # Analisar primeiros 5 t√©cnicos
            issues_found = []
            
            for i, tech in enumerate(ranking[:5]):
                print(f"\n--- T√©cnico {i+1} ---")
                print(f"Nome: {tech.get('name', 'N/A')}")
                print(f"Tickets: {tech.get('ticket_count', 0)}")
                print(f"Resolvidos: {tech.get('resolved_count', 0)}")
                print(f"Score: {tech.get('performance_score', 'N/A')}")
                print(f"Fonte: {tech.get('data_source', 'unknown')}")
                
                # Identificar problemas
                if tech.get('ticket_count', 0) == 0:
                    issue = f"‚ö†Ô∏è PROBLEMA: T√©cnico {tech.get('name')} sem tickets!"
                    print(f"  {issue}")
                    issues_found.append(issue)
                    
                if tech.get('performance_score') is None:
                    issue = f"‚ö†Ô∏è PROBLEMA: Score nulo para {tech.get('name')}!"
                    print(f"  {issue}")
                    issues_found.append(issue)
                    
                if tech.get('data_source') == 'unknown':
                    issue = f"‚ö†Ô∏è PROBLEMA: Fonte desconhecida para {tech.get('name')}!"
                    print(f"  {issue}")
                    issues_found.append(issue)
            
            if issues_found:
                print(f"\nüö® PROBLEMAS IDENTIFICADOS ({len(issues_found)}):")
                for issue in issues_found:
                    print(f"  - {issue}")
            else:
                print("\n‚úÖ Nenhum problema cr√≠tico identificado no ranking")
            
            return ranking
            
        except Exception as e:
            print(f"‚ùå Erro ao validar ranking de t√©cnicos: {e}")
            logger.error(f"Technician ranking validation error: {e}")
            return []
    
    def validate_performance_metrics(self) -> Dict[str, Any]:
        """5. Teste de m√©tricas de performance"""
        print("\nüìä 5. VALIDANDO M√âTRICAS DE PERFORMANCE...")
        
        try:
            # Definir per√≠odo de teste
            end_date = datetime.now()
            start_date = end_date - timedelta(days=30)
            
            # Buscar m√©tricas usando o m√©todo corrigido
            performance_result = self.glpi_facade.get_technician_performance()
            
            if not performance_result.get('success', False):
                print(f"‚ùå Erro ao obter m√©tricas: {performance_result.get('error', 'Erro desconhecido')}")
                return {'total_records': 0, 'valid_records': 0, 'issues': ['Falha ao obter dados']}
            
            performance = performance_result.get('data', [])
            print(f"üìà Total de registros de performance: {len(performance)}")
            
            # Analisar m√©tricas
            zero_tickets = 0
            null_scores = 0
            valid_records = 0
            
            for record in performance[:10]:  # Primeiros 10
                if record.get('total_tickets', 0) == 0:
                    zero_tickets += 1
                if record.get('performance_score') is None:
                    null_scores += 1
                if record.get('total_tickets', 0) > 0 and record.get('performance_score') is not None:
                    valid_records += 1
            
            print(f"üìä An√°lise das m√©tricas:")
            print(f"  - Registros com zero tickets: {zero_tickets}")
            print(f"  - Registros com score nulo: {null_scores}")
            print(f"  - Registros v√°lidos: {valid_records}")
            
            return {
                'total_records': len(performance),
                'zero_tickets': zero_tickets,
                'null_scores': null_scores,
                'valid_records': valid_records,
                'data': performance[:5]  # Primeiros 5 para an√°lise
            }
            
        except Exception as e:
            print(f"‚ùå Erro ao validar m√©tricas de performance: {e}")
            logger.error(f"Performance metrics validation error: {e}")
            return {}
    
    def run_complete_validation(self) -> Dict[str, Any]:
        """Executa valida√ß√£o completa seguindo o checklist"""
        print("üîç INICIANDO VALIDA√á√ÉO COMPLETA GLPI...")
        print("=" * 50)
        
        results = {
            'timestamp': datetime.now().isoformat(),
            'connectivity': False,
            'authentication': False,
            'basic_data': {},
            'technician_ranking': [],
            'performance_metrics': {},
            'summary': {
                'total_issues': 0,
                'critical_issues': [],
                'recommendations': []
            }
        }
        
        # 1. Conectividade
        results['connectivity'] = self.validate_connectivity()
        if not results['connectivity']:
            results['summary']['critical_issues'].append("Falha na conectividade GLPI")
            return results
        
        # 2. Autentica√ß√£o
        results['authentication'] = self.validate_authentication()
        if not results['authentication']:
            results['summary']['critical_issues'].append("Falha na autentica√ß√£o GLPI")
            return results
        
        # 3. Dados b√°sicos
        results['basic_data'] = self.validate_basic_data()
        
        # 4. Ranking de t√©cnicos
        results['technician_ranking'] = self.validate_technician_ranking()
        
        # 5. M√©tricas de performance
        results['performance_metrics'] = self.validate_performance_metrics()
        
        # Gerar resumo
        self._generate_summary(results)
        
        return results
    
    def _generate_summary(self, results: Dict[str, Any]) -> None:
        """Gera resumo da valida√ß√£o"""
        print("\n" + "=" * 50)
        print("üìã RESUMO DA VALIDA√á√ÉO")
        print("=" * 50)
        
        # Status geral
        if results['connectivity'] and results['authentication']:
            print("‚úÖ Status Geral: CONECTADO")
        else:
            print("‚ùå Status Geral: PROBLEMAS DE CONEX√ÉO")
        
        # Dados b√°sicos
        basic = results.get('basic_data', {})
        if basic.get('tickets_available') and basic.get('users_available'):
            print("‚úÖ Dados B√°sicos: DISPON√çVEIS")
        else:
            print("‚ö†Ô∏è Dados B√°sicos: PROBLEMAS DETECTADOS")
        
        # Ranking
        ranking_count = len(results.get('technician_ranking', []))
        if ranking_count > 0:
            print(f"‚úÖ Ranking de T√©cnicos: {ranking_count} registros")
        else:
            print("‚ùå Ranking de T√©cnicos: VAZIO")
            results['summary']['critical_issues'].append("Ranking de t√©cnicos vazio")
        
        # Performance
        perf = results.get('performance_metrics', {})
        if perf.get('total_records', 0) > 0:
            print(f"‚úÖ M√©tricas de Performance: {perf['total_records']} registros")
            if perf.get('zero_tickets', 0) > 0:
                print(f"‚ö†Ô∏è Registros com zero tickets: {perf['zero_tickets']}")
        else:
            print("‚ùå M√©tricas de Performance: VAZIAS")
            results['summary']['critical_issues'].append("M√©tricas de performance vazias")
        
        # Recomenda√ß√µes
        recommendations = [
            "Verificar filtros de data nos endpoints",
            "Validar permiss√µes de entidade no GLPI",
            "Conferir mapeamento de status de tickets",
            "Implementar logs detalhados em produ√ß√£o",
            "Monitorar cache para dados stale"
        ]
        
        print("\nüéØ RECOMENDA√á√ïES:")
        for i, rec in enumerate(recommendations, 1):
            print(f"  {i}. {rec}")
        
        results['summary']['recommendations'] = recommendations
        results['summary']['total_issues'] = len(results['summary']['critical_issues'])

def main():
    """Fun√ß√£o principal"""
    validator = GLPIDataValidator()
    
    try:
        results = validator.run_complete_validation()
        
        # Salvar resultados
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        output_file = f"glpi_validation_results_{timestamp}.json"
        
        import json
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\nüíæ Resultados salvos em: {output_file}")
        
        return results['summary']['total_issues'] == 0
        
    except Exception as e:
        print(f"‚ùå Erro durante valida√ß√£o: {e}")
        logger.error(f"Validation error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)